{
	"info": {
		"_postman_id": "edacd657-27c8-4179-8041-3b3bf24d7839",
		"name": "Program Batch",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "POST",
			"item": [
				{
					"name": "Create Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a126ef46-84f3-4d57-8738-cee759105695",
								"exec": [
									"//Verify Status code",
									"//Status Code Validation",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");",
									"});",
									"",
									"//API Chaining",
									"",
									"var jsonData=pm.response.json();",
									"var APIbatchId=jsonData.batchId;",
									"pm.globals.set(\"APIBatchID\", APIbatchId);",
									"console.log(APIbatchId);",
									"",
									"var NewbatchName=jsonData.batchName;",
									"pm.globals.set(\"BatchName\", NewbatchName);",
									"console.log(NewbatchName);",
									"",
									"var NewProgramID=jsonData.programId;",
									"pm.globals.set(\"BatchProgramID\", NewProgramID);",
									"console.log(NewProgramID);",
									"",
									"//JSON SCHEMA Validation",
									"var schema = {",
									"    properties: {",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    programName: {",
									"      type: \"string\",",
									"    },",
									"    programDescription: {",
									"      type: \"string\",",
									"    },",
									"    programStatus: {",
									"      type: \"string\",",
									"    },",
									"     creationTime: {",
									"      type: \"string\",",
									"    },",
									"     lastModTime: {",
									"      type: \"string\",",
									"    },",
									"  },",
									"  required: [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a6cfbfaa-322d-4feb-b7af-e3e78f2b1997",
								"exec": [
									"var batchName= \"Jun23-APIc Scripters-SDET-SDET{{$randomInt}}-\" + pm.variables.replaceIn(\"{{$randomInt}}\");",
									"",
									"pm.globals.set(\"batchName\", batchName);",
									"pm.collectionVariables.set(\"batchDescription\", \"Testing\" );",
									"pm.collectionVariables.set(\"batchNoOfClasses\", \"8\" );",
									"pm.collectionVariables.set(\"batchStatus\", \"Active\" );",
									"pm.collectionVariables.set(\"programId\", \"1362\");",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "054de888-c91a-4ed8-ae5e-9affcb6bebc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchName\": \"{{batchName}}\",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": \"{{programId}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/batches"
					},
					"response": []
				},
				{
					"name": "Neg Create with Existing Batch Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d19d4ed-0754-42e0-b057-0f305e45d770",
								"exec": [
									"",
									"",
									"//pm.globals.set(\"batchName\", batchName);",
									"pm.collectionVariables.set(\"batchDescription\", \"Testing\" );",
									"pm.collectionVariables.set(\"batchNoOfClasses\", \"8\" );",
									"pm.collectionVariables.set(\"batchStatus\", \"Active\" );",
									"pm.collectionVariables.set(\"programId\", \"1362\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a39f6ee2-f339-4a4b-a905-3b050ae4b52a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//check Response Body ",
									"pm.test(\"Check invalid Batch Name in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(pm.response.text()).to.contain(\"Jun23-APIc Scripters\");",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    pm.expect(pm.response.text()).to.include(\"message\",\"Please give a different batch Name or Choose a different Program\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dc304b45-aed1-4436-ae9f-02e4e68d8450",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchName\": \"Jun23-APIc Scripters-SDET-SDET272-506\",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": \"{{programId}}\"\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/batches"
					},
					"response": []
				},
				{
					"name": "Neg Create with null batch status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d19d4ed-0754-42e0-b057-0f305e45d770",
								"exec": [
									"",
									"",
									"//pm.globals.set(\"batchName\", batchName);",
									"pm.collectionVariables.set(\"batchDescription\", \"Testing\" );",
									"pm.collectionVariables.set(\"batchNoOfClasses\", \"8\" );",
									"pm.collectionVariables.set(\"batchStatus\", \"Active\" );",
									"pm.collectionVariables.set(\"programId\", \"1362\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5d62852-1831-4b87-a8f8-6db27903a3ce",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//check Response Body ",
									"pm.test(\"Check Batch Status in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Batch status is needed\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "82b7578f-5d6b-48fc-9b04-51b99db16c17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchName\": \"{{batchName}}\",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \" \",\n  \"programId\": \"{{programId}}\"\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/batches"
					},
					"response": []
				},
				{
					"name": "Neg Create with null batch noofclasses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d19d4ed-0754-42e0-b057-0f305e45d770",
								"exec": [
									"",
									"",
									"//pm.globals.set(\"batchName\", batchName);",
									"pm.collectionVariables.set(\"batchDescription\", \"Testing\" );",
									"pm.collectionVariables.set(\"batchNoOfClasses\", \"8\" );",
									"pm.collectionVariables.set(\"batchStatus\", \"Active\" );",
									"pm.collectionVariables.set(\"programId\", \"1362\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9f8617c-d15e-4ce6-a356-470c081a5446",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//check Response Body ",
									"pm.test(\"Check Batch No of classes in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"No of Classes is needed; It should be a positive number\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0be4fc12-7734-48ec-ae9f-0f0a59cc1f43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchName\": \"{{batchName}}\",\n  \"batchNoOfClasses\": \"\",\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": \"{{programId}}\"\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/batches"
					},
					"response": []
				},
				{
					"name": "Neg Create with null programid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d19d4ed-0754-42e0-b057-0f305e45d770",
								"exec": [
									"",
									"",
									"//pm.globals.set(\"batchName\", batchName);",
									"pm.collectionVariables.set(\"batchDescription\", \"Testing\" );",
									"pm.collectionVariables.set(\"batchNoOfClasses\", \"8\" );",
									"pm.collectionVariables.set(\"batchStatus\", \"Active\" );",
									"pm.collectionVariables.set(\"programId\", \"1362\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5d29db8-5d0c-4fdf-8e3b-ea1072b04986",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//check Response Body ",
									"pm.test(\"Check Batch No of classes in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"ProgramId field is needed; It should be a positive number\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ebea6b67-5329-4e34-ade7-37ebc361bc30",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchName\": \"{{batchName}}\",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": \"\"\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/batches"
					},
					"response": []
				}
			],
			"id": "51478632-6830-4db6-af4b-8cfd3d8fc5bd"
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "GET Batches – ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50c2653b-13c8-4d07-9700-86f31cbed194",
								"exec": [
									"//Status Code Validation",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"//var jsonResponse=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData[1].batchId).to.be.a(\"number\");",
									"    pm.expect(jsonData[1].batchName).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].batchDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].batchStatus).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].batchNoOfClasses).to.be.a(\"number\");",
									"    pm.expect(jsonData[1].programId).to.be.a(\"number\");",
									"});",
									"",
									"//Validate Response body content",
									"var jsonData = JSON.parse(responseBody);",
									"var filteredData = jsonData.filter(function(item) {",
									"  if (!item.batchName) {",
									"    return",
									"  }",
									"  return item.batchName.includes(\"Jun23-APIc\");",
									"});",
									"console.log(\"filteredData\", filteredData);",
									"",
									"",
									"",
									"//Validating JSON Schema",
									"",
									"var schema = {",
									"    properties: {",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    programName: {",
									"      type: \"string\",",
									"    },",
									"    programDescription: {",
									"      type: \"string\",",
									"    },",
									"    programStatus: {",
									"      type: \"string\",",
									"    },",
									"     creationTime: {",
									"      type: \"string\",",
									"    },",
									"     lastModTime: {",
									"      type: \"string\",",
									"    },",
									"  },",
									"  required: [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b1bc6627-1097-4d10-ac2e-f52fcd117a3d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/batches",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab803edb-e4b5-4c84-bcb4-d263babc0227",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check BatchID present",
									"pm.test(\"Check Batch id present in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(jsonData.batchId).to.eql(pm.globals.get(\"APIBatchID\"));",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"var jsonResponse=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"});",
									"",
									"//Validate Response body content",
									"//const response = pm.response.json();",
									"//pm.test(\"Test Response Body Values\",() => {",
									"    // pm.expect(response).to.include.nested.property(\"batchid\", 314);",
									"     // pm.expect(jsonResponse[0].batchName).to.include(\"Jun23-APIc Scripters\");",
									"   // pm.expect(jsonData[1].programName).to.eql(\"mathsupdating1\");",
									"   // pm.expect(jsonData[1].batchId).to.eql(1);",
									"   // pm.expect(jsonData[1].batchDescription).to.eql(\"string\");",
									"   // pm.expect(jsonData[1].batchStatus).to.eql(\"Active\");",
									"   // pm.expect(jsonData[1].batchNoOfClasses).to.eql(5);",
									"  //  pm.expect(jsonData[1].programId).to.eql(1);",
									"//});",
									"",
									"",
									"//Validating JSON Schema",
									"",
									"var schema = {",
									"    properties: {",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    programName: {",
									"      type: \"string\",",
									"    },",
									"    programDescription: {",
									"      type: \"string\",",
									"    },",
									"    programStatus: {",
									"      type: \"string\",",
									"    },",
									"     creationTime: {",
									"      type: \"string\",",
									"    },",
									"     lastModTime: {",
									"      type: \"string\",",
									"    },",
									"  },",
									"  required: [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a44775c1-a96a-434a-a0c9-2a70a6eadfd3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/batches/batchId/{{APIBatchID}}"
					},
					"response": []
				},
				{
					"name": "Get Batch by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57d55620-3a5b-427e-853b-4c36a298373d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check BatchName present",
									"pm.test(\"Check Batch Name present in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(jsonData[0].batchName).to.contain(\"Jun23-APIc Scripters\");",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"var jsonResponse=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData[0].batchId).to.be.a(\"number\");",
									"    pm.expect(jsonData[0].batchName).to.be.a(\"string\");",
									"    pm.expect(jsonData[0].batchDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData[0].batchStatus).to.be.a(\"string\");",
									"    pm.expect(jsonData[0].batchNoOfClasses).to.be.a(\"number\");",
									"    pm.expect(jsonData[0].programId).to.be.a(\"number\");",
									"});",
									"",
									"",
									"//Validate Response body content",
									"//const response = pm.response.json();",
									"//pm.test(\"Test Response Body Values\",() => {",
									"    // pm.expect(response).to.include.nested.property(\"batchid\", 314);",
									"     // pm.expect(jsonResponse[0].batchName).to.include(\"Jun23-APIc Scripters\");",
									"   // pm.expect(jsonData[1].programName).to.eql(\"mathsupdating1\");",
									"   // pm.expect(jsonData[1].batchId).to.eql(1);",
									"   // pm.expect(jsonData[1].batchDescription).to.eql(\"string\");",
									"   // pm.expect(jsonData[1].batchStatus).to.eql(\"Active\");",
									"   // pm.expect(jsonData[1].batchNoOfClasses).to.eql(5);",
									"  //  pm.expect(jsonData[1].programId).to.eql(1);",
									"//});",
									"",
									"",
									"//Validating JSON Schema",
									"",
									"var schema = {",
									"    properties: {",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    programName: {",
									"      type: \"string\",",
									"    },",
									"    programDescription: {",
									"      type: \"string\",",
									"    },",
									"    programStatus: {",
									"      type: \"string\",",
									"    },",
									"     creationTime: {",
									"      type: \"string\",",
									"    },",
									"     lastModTime: {",
									"      type: \"string\",",
									"    },",
									"  },",
									"  required: [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d46386c3-7c6d-4ece-9c3f-19bf5ba1500f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/batches/batchName/{{BatchName}}"
					},
					"response": []
				},
				{
					"name": "Get Batch by ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e82cd467-9a79-49b8-b236-8f0ad910cca0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check Batch Program ID present",
									"pm.test(\"Check Program ID present in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(jsonData[0].programId).to.eql(pm.variables.get(\"BatchProgramID\"));",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"var jsonResponse=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData[0].batchId).to.be.a(\"number\");",
									"    pm.expect(jsonData[0].batchName).to.be.a(\"string\");",
									"    pm.expect(jsonData[0].batchDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData[0].batchStatus).to.be.a(\"string\");",
									"    pm.expect(jsonData[0].batchNoOfClasses).to.be.a(\"number\");",
									"    pm.expect(jsonData[0].programId).to.be.a(\"number\");",
									"});",
									"",
									"//Validate Response body content",
									"//const response = pm.response.json();",
									"//pm.test(\"Test Response Body Values\",() => {",
									"    // pm.expect(response).to.include.nested.property(\"batchid\", 314);",
									"     // pm.expect(jsonResponse[0].batchName).to.include(\"Jun23-APIc Scripters\");",
									"   // pm.expect(jsonData[1].programName).to.eql(\"mathsupdating1\");",
									"   // pm.expect(jsonData[1].batchId).to.eql(1);",
									"   // pm.expect(jsonData[1].batchDescription).to.eql(\"string\");",
									"   // pm.expect(jsonData[1].batchStatus).to.eql(\"Active\");",
									"   // pm.expect(jsonData[1].batchNoOfClasses).to.eql(5);",
									"  //  pm.expect(jsonData[1].programId).to.eql(1);",
									"//});",
									"",
									"",
									"//Validating JSON Schema",
									"",
									"var schema = {",
									"    properties: {",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    programName: {",
									"      type: \"string\",",
									"    },",
									"    programDescription: {",
									"      type: \"string\",",
									"    },",
									"    programStatus: {",
									"      type: \"string\",",
									"    },",
									"     creationTime: {",
									"      type: \"string\",",
									"    },",
									"     lastModTime: {",
									"      type: \"string\",",
									"    },",
									"  },",
									"  required: [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf26853e-c68c-4f43-a4f9-b42b13cb2b76",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/batches/program/{{BatchProgramID}}"
					},
					"response": []
				},
				{
					"name": "Neg Get Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ca43640-c09b-4fad-8017-f565bec817cc",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//check BatchID present",
									"pm.test(\"Check Batch id present in response body\", () =>{",
									"    //var jsonData=pm.response.json();",
									"    //pm.expect(jsonData.batchId).to.eql(pm.globals.get(\"APIBatchID\"));",
									"    var jsonData=pm.response.json();",
									"    //pm.expect(pm.response.text()).to.contain(pm.globals.get(\"APIBatchID\"));",
									"    pm.expect(pm.response.text()).to.include(\"Batch not found\");",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "544fb008-67ca-4628-95ce-44ef0eadcc91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/batches/batchId/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "7389"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Neg Get Batch by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f3abf77-a69a-4427-bb0f-f5fc58a49305",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//check Response Body ",
									"pm.test(\"Check invalid Batch Name in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"   // pm.expect(pm.response.text()).to.contain(\"Jun23-APIc Scripters\");",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f836f230-1e0a-4737-ac37-d234a6e42998",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/batches/batchName/{{NegbatchName}}"
					},
					"response": []
				},
				{
					"name": "Neg Get Batch by ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02edd60d-6abd-4abb-b1a8-ed462ff0ae04",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//check Batch Program ID present",
									"pm.test(\"Check invalid Batch Name in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    //pm.expect(jsonData[0].programId).to.eql(pm.variables.get(\"programId\"));",
									"    pm.expect(pm.response.text()).to.contain(\"programId\");",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb726ceb-31e1-452c-98c4-a7fee3b88ce2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/batches/program/{{NegprogramID}}"
					},
					"response": []
				}
			],
			"id": "e2269000-fc6c-4e69-9320-ade4a3238157"
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "update batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e18a0b3-5c71-4b97-ba58-1251c5cdb3de",
								"exec": [
									"var UpdatebatchName= \"Jun23-APIc Scripters-SDET-SDET{{$randomInt}}-\" + pm.variables.replaceIn(\"{{$randomInt}}\");",
									"",
									"pm.globals.set(\"UpdatebatchName\", UpdatebatchName);",
									"//pm.collectionVariables.set(\"batchDescription\", \"Testing\" );",
									"//pm.collectionVariables.set(\"batchNoOfClasses\", \"8\" );",
									"//pm.collectionVariables.set(\"batchStatus\", \"Active\" );",
									"//pm.collectionVariables.set(\"programId\", \"1362\");",
									"pm.collectionVariables.set(\"programName\", \"Jun23-APIc Scripters-SDET5DA1-388\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed6574ce-cf8e-42ee-9bba-c84db3213f71",
								"exec": [
									"//Verify Status code",
									"//Status Code Validation",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");",
									"});",
									"",
									"//API Chaining",
									"",
									"var jsonData=pm.response.json();",
									"var APIbatchId=jsonData.batchId;",
									"pm.globals.set(\"APIBatchID\", APIbatchId);",
									"console.log(APIbatchId);",
									"",
									"",
									"//JSON SCHEMA Validation",
									"var schema = {",
									"    properties: {",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    programName: {",
									"      type: \"string\",",
									"    },",
									"    programDescription: {",
									"      type: \"string\",",
									"    },",
									"    programStatus: {",
									"      type: \"string\",",
									"    },",
									"     creationTime: {",
									"      type: \"string\",",
									"    },",
									"     lastModTime: {",
									"      type: \"string\",",
									"    },",
									"  },",
									"  required: [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "24d8c430-d83f-4996-ae1b-a58c6b18c465",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchId\": \"{{APIBatchID}}\",\n  \"batchName\": \"{{UpdatebatchName}}\",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": \"{{programId}}\",\n  \"programName\": \"{{programName}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update batch status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e18a0b3-5c71-4b97-ba58-1251c5cdb3de",
								"exec": [
									"//var UpdatebatchName= \"Jun23-APIc Scripters-SDET-SDET{{$randomInt}}-\" + pm.variables.replaceIn(\"{{$randomInt}}\");",
									"",
									"//pm.globals.set(\"UpdatebatchName\", UpdatebatchName);",
									"//pm.collectionVariables.set(\"batchDescription\", \"Testing\" );",
									"//pm.collectionVariables.set(\"batchNoOfClasses\", \"8\" );",
									"pm.collectionVariables.set(\"UpdatebatchStatus\", \"InActive\" );",
									"//pm.collectionVariables.set(\"programId\", \"1362\");",
									"//pm.collectionVariables.set(\"programName\", \"Jun23-APIc Scripters-SDET5DA1-388\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2d36a42b-1b66-4bde-b82a-9d61b434463a",
								"exec": [
									"//Verify Status code",
									"//Status Code Validation",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");",
									"});",
									"",
									"//API Chaining",
									"",
									"var jsonData=pm.response.json();",
									"var APIbatchId=jsonData.batchId;",
									"pm.globals.set(\"APIBatchID\", APIbatchId);",
									"console.log(APIbatchId);",
									"",
									"",
									"//JSON SCHEMA Validation",
									"var schema = {",
									"    properties: {",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    programName: {",
									"      type: \"string\",",
									"    },",
									"    programDescription: {",
									"      type: \"string\",",
									"    },",
									"    programStatus: {",
									"      type: \"string\",",
									"    },",
									"     creationTime: {",
									"      type: \"string\",",
									"    },",
									"     lastModTime: {",
									"      type: \"string\",",
									"    },",
									"  },",
									"  required: [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3a71a1a2-1ddd-4c35-ae19-8966b9cc18bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchId\": \"{{APIBatchID}}\",\n  \"batchName\": \"Jun23-APIc Scripters-SDET-SDET794-506\",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"{{UpdatebatchStatus}}\",\n  \"programId\": \"{{programId}}\",\n  \"programName\": \"{{programName}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "24bb95f3-40da-4b3e-a727-0c7323f09589",
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update batch program ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e18a0b3-5c71-4b97-ba58-1251c5cdb3de",
								"exec": [
									"//var UpdatebatchName= \"Jun23-APIc Scripters-SDET-SDET{{$randomInt}}-\" + pm.variables.replaceIn(\"{{$randomInt}}\");",
									"",
									"//pm.globals.set(\"UpdatebatchName\", UpdatebatchName);",
									"//pm.collectionVariables.set(\"batchDescription\", \"Testing\" );",
									"//pm.collectionVariables.set(\"batchNoOfClasses\", \"8\" );",
									"//pm.collectionVariables.set(\"UpdatebatchStatus\", \"InActive\" );",
									"pm.collectionVariables.set(\"NewprogramId\", \"4904\");",
									"//pm.collectionVariables.set(\"programName\", \"Jun23-APIc Scripters-SDET5DA1-388\");",
									"",
									"//1362"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d1823c64-a709-4eae-8f15-b5864d9fd670",
								"exec": [
									"//Verify Status code",
									"//Status Code Validation",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");",
									"});",
									"",
									"//API Chaining",
									"",
									"var jsonData=pm.response.json();",
									"var APIbatchId=jsonData.batchId;",
									"pm.globals.set(\"APIBatchID\", APIbatchId);",
									"console.log(APIbatchId);",
									"",
									"",
									"//JSON SCHEMA Validation",
									"var schema = {",
									"    properties: {",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    programName: {",
									"      type: \"string\",",
									"    },",
									"    programDescription: {",
									"      type: \"string\",",
									"    },",
									"    programStatus: {",
									"      type: \"string\",",
									"    },",
									"     creationTime: {",
									"      type: \"string\",",
									"    },",
									"     lastModTime: {",
									"      type: \"string\",",
									"    },",
									"  },",
									"  required: [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "566afbff-e2ed-44a2-bcee-5e3991dd88d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchId\": \"{{APIBatchID}}\",\n  \"batchName\": \"Jun23-APIc Scripters-SDET-SDET794-506\",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": \"{{NewprogramId}}\",\n  \"programName\": \"{{programName}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "24bb95f3-40da-4b3e-a727-0c7323f09589",
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Neg Update Batch invaliad batch name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9d03074-7313-4153-a01e-7c2b8eb9df88",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//check Response Body ",
									"pm.test(\"Check invalid Batch Name in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Batch Name is mandatory\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0d6f21d8-9643-4736-8d83-bdfe801b21c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchId\": \"{{APIBatchID}}\",\n  \"batchName\": \" \",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": \"{{programId}}\",\n  \"programName\": \"{{programName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "a6bf55e6-4452-4f9c-80bc-5ba09b4572ee",
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Neg Update Batch invalid batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d34e5b05-0c5f-4a8a-a410-46f28f4842b5",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//check Response Body ",
									"pm.test(\"Check Batch Status in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Batch status is needed\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b85e7c80-904b-4891-a553-3e1b1b4d689f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchId\": \"{{APIBatchID}}\",\n  \"batchName\": \"{{batchName}} \",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"\",\n  \"programId\": \"{{programId}}\",\n  \"programName\": \"{{programName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "a6bf55e6-4452-4f9c-80bc-5ba09b4572ee",
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Neg Update Batch invalid batch programID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3b38f35-147d-4cac-a72b-86049038a266",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//check Response Body ",
									"pm.test(\"Check Batch No of classes in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"ProgramId field is needed; It should be a positive number\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d31a1f59-dce7-494b-8605-7731febec662",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchId\": \"{{APIBatchID}}\",\n  \"batchName\": \"{{batchName}} \",\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n  \"batchStatus\": \"{{batchStatus\",\n  \"programId\": \"\",\n  \"programName\": \"{{programName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "a6bf55e6-4452-4f9c-80bc-5ba09b4572ee",
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Neg Update Batch invalid batch noofClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60b5e9eb-0bae-4d89-bfa3-d1cd1393c746",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"///check Response Body ",
									"pm.test(\"Check Batch No of classes in response body\", () =>{",
									"    var jsonData=pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"No of Classes is needed; It should be a positive number\");",
									"    pm.expect(pm.response.text()).to.include(\"success\", false);",
									"});",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type Header is application-json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "886aaecc-665f-429f-8180-8601fc14981e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchId\": \"{{APIBatchID}}\",\n  \"batchName\": \"{{batchName}} \",\n  \"batchNoOfClasses\": \"\",\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": \"{{programId}}\",\n  \"programName\": \"{{programName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "a6bf55e6-4452-4f9c-80bc-5ba09b4572ee",
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "ba11d823-ad66-493c-acee-a4defc44c7b8"
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "Delete Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39337579-a0c3-4013-89b2-8c8536ff47a5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 400ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"//Check Body Validation",
									"pm.test(\"Check Batch id present in response body\", () =>{",
									"   var jsonData=pm.response.text();",
									"  // pm.expect(pm.response.text()).to.include(pm.variables.get(\"APIBatchID\"));",
									"   pm.expect(jsonData).to.include('deleted Successfully!');",
									"});",
									"console.log(pm.variables.get(\"APIBatchID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "19aaf1c6-adf6-46fc-8fb1-4266a1bcd163",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Neg Delete Invalid Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fc3a7f4-be4b-42d8-ba07-24d1c948171c",
								"exec": [
									"//Check Status Code",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 400ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"//Check Body Validation",
									"pm.test(\"Check Batch id present in response body\", () =>{",
									"   var jsonData=pm.response.json();",
									"   pm.expect(pm.response.text()).to.include(pm.variables.get(\"APIBatchID\"));",
									"   pm.expect(pm.response.text()).to.include('Batch not found with Id');",
									"});",
									"console.log(pm.variables.get(\"APIBatchID\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ac48c562-97c5-4379-9166-e00254fbe995",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/batches/:batchId",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{APIBatchID}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "bf79cc03-a789-45f6-bf03-105d12d0bd31"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "352faa42-71f7-494e-be9e-6c226e4c2586",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "100c5b70-967b-4be6-adf9-33c118078b91",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8092e5a8-8524-4776-b500-93af83d2bf88",
			"key": "batchID",
			"value": "2",
			"disabled": true
		},
		{
			"id": "2f9c2183-f44e-4b00-88ce-d282a76b4e30",
			"key": "batchName",
			"value": "SDET",
			"disabled": true
		},
		{
			"id": "60776c0b-6bb7-4f3c-a67e-e3c8eb9496bc",
			"key": "programID",
			"value": "1",
			"disabled": true
		},
		{
			"id": "e5522242-e9bf-4cc7-aac9-462386e7d9ec",
			"key": "NegbatchID",
			"value": "50",
			"disabled": true
		},
		{
			"id": "736bce0d-1dd5-4faf-8737-d4878a1412c6",
			"key": "NegbatchName",
			"value": "java"
		},
		{
			"id": "941b5355-87ad-4756-9399-6d61adda76ea",
			"key": "NegprogramID",
			"value": "10"
		},
		{
			"id": "aba81c69-75b7-4f44-b8a1-8093fb443e2f",
			"key": "batchDescription",
			"value": ""
		},
		{
			"id": "05fc0d79-70d8-4996-980c-397cd3eb355c",
			"key": "batchNoOfClasses",
			"value": ""
		},
		{
			"id": "22d74c06-f14c-40a2-9a64-3f48981ca91d",
			"key": "batchStatus",
			"value": ""
		},
		{
			"id": "1d4e8246-87eb-4bf1-bc46-c102421a23cd",
			"key": "programId",
			"value": ""
		},
		{
			"id": "e4dc3850-e147-45e3-aaaa-7e98059bc00b",
			"key": "batchName",
			"value": ""
		},
		{
			"id": "43da1ca4-21b5-40ae-8a9d-9b436f6162f6",
			"key": "UpdatebatchName",
			"value": ""
		},
		{
			"id": "d7b4168b-ce88-4aea-9090-f24a5b5c4254",
			"key": "UpdatebatchNoOfClasses",
			"value": ""
		},
		{
			"id": "2e95abb7-87c3-4a19-b640-5b212a78c8a4",
			"key": "UpdatebatchStatus",
			"value": ""
		},
		{
			"id": "3fcc8173-7d49-4653-888a-b9f0d68c0b6b",
			"key": "UpdateprogramId",
			"value": ""
		},
		{
			"id": "520ad773-589c-438b-8fdf-c2728f574ab5",
			"key": "programName",
			"value": ""
		},
		{
			"id": "2c884f41-bd98-4db4-b85c-873a39eae082",
			"key": "NewprogramId",
			"value": ""
		}
	]
}