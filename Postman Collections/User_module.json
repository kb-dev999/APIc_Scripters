{
	"info": {
		"_postman_id": "4a9edc6e-2d92-4e11-b7a6-12ac2e945f34",
		"name": "User Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Post",
			"item": [
				{
					"name": "PostRequest_R01_HardCoded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1ca69e6-205e-4a97-986d-afa6243ee262",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//Header validation\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"//Header Type Validation\r",
									"pm.test(\"Content-Type Header is application-json\", () => {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"All Data types are correct\",()=>{\r",
									"    var jsondata = pm.response.json();\r",
									"    pm.expect(jsondata.userFirstName).to.be.a(\"string\");\r",
									"    pm.expect(jsondata.userLastName).to.be.a(\"string\");\r",
									"     pm.expect(jsondata.userPhoneNumber).to.be.a(\"number\");\r",
									"    pm.expect(jsondata.userTimeZone).to.be.a(\"string\");\r",
									"    \r",
									"});\r",
									"\r",
									"//Validate Response body content\r",
									"\r",
									"\r",
									"pm.test(\"Newly created User request attributes\",() => {\r",
									"   var jsonData = pm.response.json(); \r",
									"   pm.expect(jsonData).to.haveOwnProperty(\"userId\");\r",
									"   //pm.expect(jsonData.userRoleStatus).to.include(\"ROLE_ADMIN\");\r",
									"   pm.expect(jsonData.userVisaStatus).to.include(\"H4-EAD\");\r",
									"  \r",
									"   \r",
									"});\r",
									"\r",
									"//Schema validations\r",
									"/*var schema=\r",
									"{\r",
									"\r",
									"  \"properties\": {\r",
									"    \r",
									"     \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"   // \"userRoleMaps\": {\r",
									"     // \"type\": \"array\",\r",
									"      //\"items\": [\r",
									"       [ {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"roleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userRoleStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"roleId\",\r",
									"            \"userRoleStatus\"\r",
									"          ]\r",
									"        },\r",
									"      \r",
									"    \r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userComments\",\r",
									"    \"userEduPg\",\r",
									"    \"userEduUg\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userLocation\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userRoleMaps\",\r",
									"    \"userTimeZone\",\r",
									"    \"userVisaStatus\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "77c0fd09-6e59-4734-a346-0b4896e3815b",
								"exec": [
									"const phNo = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"phnNum\",phNo);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e45a3aa4-ece6-42b9-a7c7-f5feee293a2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userComments\": \"Jun23-APIcScripters-Role_Admin\",\r\n\"userEduPg\": \"string\",\r\n\"userEduUg\": \"string\",\r\n\"userFirstName\": \"John\",\r\n\"userLastName\": \"Luther\",\r\n\"userLinkedinUrl\": \"string\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": \"{{phnNum}}\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n],\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H4-EAD\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Negative_PostRequest_R01_HardCoded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1ca69e6-205e-4a97-986d-afa6243ee262",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202,400]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"failing test\", () => {\r",
									"\r",
									"    try {\r",
									"\r",
									"        pm.expect(200).to.eq(404)\r",
									"\r",
									"    } catch (a) {\r",
									"\r",
									"        console.log(\" Failed to create new User as phone number '11111111'  already exists\"+ a)\r",
									"\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e6adfe6f-cea0-4197-bb49-45fb599e7dbd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userComments\": \"Team APIcScripters_R01\",\r\n\"userEduPg\": \"string\",\r\n\"userEduUg\": \"string\",\r\n\"userFirstName\": \"John\",\r\n\"userLastName\": \"Luther\",\r\n\"userLinkedinUrl\": \"string\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": \"11111111\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n],\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H4-EAD\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "PostRequest_R03",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0f3d5ce-453f-45de-88df-4ac23bf364c6",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Check Header is present or not\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check Header Value\r",
									"pm.test(\"Content-Type Header is application-json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"//Validate Response time\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var schema =\r",
									" {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userId\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userLocation\",\r",
									"    \"userTimeZone\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userEduUg\",\r",
									"    \"userEduPg\",\r",
									"    \"userComments\",\r",
									"    \"userVisaStatus\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a15ef4d-c96d-4d54-8367-cafe2ad1fccb",
								"exec": [
									"const phNo = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"phnNum\",phNo);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "05c4508e-2597-4b57-826e-692357a9ff59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Jun23-APIcScripters-Role_Student\",\r\n  \"userEduPg\": \"userEduPg Created\",\r\n  \"userEduUg\": \"userEduUg Created\",\r\n  \"userFirstName\": \"userFirstName Created\",\r\n  \"userLastName\": \"userLastName Created\",\r\n  \"userLinkedinUrl\": \"userLinkedinUrl Created\",\r\n  \"userLocation\": \"userLocation Created\",\r\n  \"userMiddleName\": \"userMiddleName Created\",\r\n  \"userPhoneNumber\":\"{{phnNum}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"ROLE_STUDENT\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"GC-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "PostRequest_R01_Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0f3d5ce-453f-45de-88df-4ac23bf364c6",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Check Header is present or not\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check Header Value\r",
									"pm.test(\"Content-Type Header is application-json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"//Validate Response time\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "813cfc49-9ddf-4c34-924d-9901d2eb33dc",
								"exec": [
									"\r",
									"const phNo = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"phnNum\",phNo);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87f38821-ad75-44a9-a840-9df4a1c6c9bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Jun23-APIcScripters-Role_Admin\",\r\n  \"userEduPg\": \"userEduPg Created\",\r\n  \"userEduUg\": \"userEduUg Created\",\r\n  \"userFirstName\": \"userFirstName APIc\",\r\n  \"userLastName\": \"userLastName APIc\",\r\n  \"userLinkedinUrl\": \"userLinkedinUrl Created\",\r\n  \"userLocation\": \"userLocation Created\",\r\n  \"userMiddleName\": \"userMiddleName Created\",\r\n  \"userPhoneNumber\":\"{{phnNum}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"ACTIVE\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"GC-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Creating user with roles_random array selection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5bd07c0-0dc6-42ba-bd93-d6af46035539",
								"exec": [
									"\r",
									"//User Role\r",
									"pm.collectionVariables.set(\"ROLE_ID_R01\", \"R01\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Random Number\r",
									"\r",
									"const phNo = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"phnNum\",phNo);\r",
									"\r",
									"// var tempPhNo=pm.variables.replaceIn('{{randomPhoneNumber');\r",
									"// var PhNo = tempPhNo.replace(/-/,'');\r",
									"// pm.environment.set(\"phnNum\",phNo);\r",
									"\r",
									"\r",
									"const timeZn_1= \"EST\";\r",
									"pm.environment.set(\"Tz1\",timeZn_1);\r",
									"\r",
									"const timeZn_2= \"CST\";\r",
									"pm.environment.set(\"Tz2\",timeZn_2);\r",
									"\r",
									"const timeZn_3= \"MST\";\r",
									"pm.environment.set(\"Tz3\",timeZn_3);\r",
									"\r",
									"const timeZn_4= \"PST\";\r",
									"pm.environment.set(\"Tz4\",timeZn_4);\r",
									"\r",
									"const timeZn_5= \"IST\";\r",
									"pm.environment.set(\"Tz5\",timeZn_5);\r",
									"\r",
									"//Random First Name\r",
									"var rnFName=pm.variables.replaceIn('{{$randomFirstName}}');\r",
									"pm.environment.set(\"fName\",rnFName);\r",
									"\r",
									"var rnLName=pm.variables.replaceIn('{{$randomLastName}}');\r",
									"pm.environment.set(\"LName\",rnLName);\r",
									"\r",
									"// var arrRoles = pm.environment.get(\"arrRoles\");\r",
									"\r",
									"// if(!arrRoles){\r",
									"//   arrRoles = [\"R01\",\"R02\",\"R03\"];\r",
									"// }\r",
									"\r",
									"\r",
									"// var currSelectedRole = arrRoles.shift();\r",
									"// pm.environment.set(\"roleid\",currSelectedRole);\r",
									"// pm.environment.set(\"arrRoles\",arrRoles);\r",
									"\r",
									"//Role Id\r",
									"var arrRoles = [\"R01\",\"R02\",\"R03\"];\r",
									"pm.environment.set(\"arrRoles\", arrRoles);\r",
									"pm.environment.set(\"roleid\", arrRoles[Math.floor(Math.random() * arrRoles.length)]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30530fb-e0b4-4559-b688-1aeaac49fea8",
								"exec": [
									"var arrRoles = pm.environment.get(\"arrRoles\");\r",
									"\r",
									"if(arrRoles && arrRoles.length > 0){\r",
									"    postman.setNextRequest(\"https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus\");\r",
									"\r",
									"}else{\r",
									"    postman.setNextRequest(null);\r",
									"}\r",
									"\r",
									"\r",
									"//For chaining\r",
									"\r",
									"var jsonResponse=pm.response.json();\r",
									"var newUserId=jsonResponse.userId;\r",
									"\r",
									"pm.globals.set(\"UId\", newUserId);\r",
									"\r",
									"\r",
									"console.log(newUserId);\r",
									"postman.setNextRequest(\"Get_UserInfo_ById_Chaining\");\r",
									"\r",
									"\r",
									"\r",
									"//Validations\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Check Header is present or not\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check Header Value\r",
									"pm.test(\"Content-Type Header is application-json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"//Validate Response time\r",
									"pm.test(\"Response time is less than 500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3ee0f18d-3c60-4ae6-a251-beb9d7d21a55",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userComments\": \"{{userComments}}\",\r\n\"userEduPg\": \"string\",\r\n\"userEduUg\": \"string\",\r\n\"userFirstName\": \"{{fName}}\",\r\n\"userLastName\": \"{{LName}}\",\r\n\"userLinkedinUrl\": \"string\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": \"{{phnNum}}\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"{{roleid}}\",\r\n\"userRoleStatus\": \"{{Ro2}}\"\r\n}\r\n],\r\n\"userTimeZone\": \"{{Tz5}}\",\r\n\"userVisaStatus\": \"H4-EAD\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "MultipleRuns with same set of data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5bd07c0-0dc6-42ba-bd93-d6af46035539",
								"exec": [
									"\r",
									"//User Role\r",
									"pm.collectionVariables.set(\"ROLE_ID_R01\", \"R01\");\r",
									"\r",
									"//Random Number\r",
									"\r",
									"const phNo = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"phnNum\",phNo);\r",
									"\r",
									"const timeZn_1= \"EST\";\r",
									"pm.environment.set(\"Tz1\",timeZn_1);\r",
									"\r",
									"const timeZn_2= \"CST\";\r",
									"pm.environment.set(\"Tz2\",timeZn_2);\r",
									"\r",
									"const timeZn_3= \"MST\";\r",
									"pm.environment.set(\"Tz3\",timeZn_3);\r",
									"\r",
									"const timeZn_4= \"PST\";\r",
									"pm.environment.set(\"Tz4\",timeZn_4);\r",
									"\r",
									"const timeZn_5= \"IST\";\r",
									"pm.environment.set(\"Tz5\",timeZn_5);\r",
									"\r",
									"//Random First Name\r",
									"var rnFName=pm.variables.replaceIn('{{$randomFirstName}}');\r",
									"pm.environment.set(\"fName\",rnFName);\r",
									"\r",
									"var rnLName=pm.variables.replaceIn('{{$randomLastName}}');\r",
									"pm.environment.set(\"LName\",rnLName);\r",
									"\r",
									"\r",
									"//Role_Id_multipleIteration\r",
									"var arrRoles = pm.environment.get(\"arrRoles\");\r",
									"\r",
									"if(!arrRoles){\r",
									"  arrRoles = [\"R01\",\"R02\",\"R03\"];\r",
									"}\r",
									"\r",
									"var currSelectedRole = arrRoles.shift();\r",
									"console.log(\"array now is \",arrRoles);\r",
									"console.log(\"currSelectedRole now is \",currSelectedRole);\r",
									"pm.environment.set(\"roleid_\",currSelectedRole);\r",
									"pm.environment.set(\"arrRoles\",arrRoles);\r",
									"\r",
									"//Role_Name \r",
									"\r",
									"var roleName = pm.environment.get(\"roleName\");\r",
									"if(!roleName){\r",
									"    roleName=[\"ROLE_ADMIN\", \"ROLE_STAFF\",\"ROLE_STUDENT\"];\r",
									"}\r",
									"var current_roleName= roleName.shift();\r",
									"console.log(\"array now is\",roleName);\r",
									"console.log(\"currSelectedRoleName now is \", current_roleName);\r",
									"pm.environment.set(\"current_roleName\", current_roleName);\r",
									"pm.environment.set(\"roleName\", roleName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30530fb-e0b4-4559-b688-1aeaac49fea8",
								"exec": [
									"var arrRoles = pm.environment.get(\"arrRoles\");\r",
									"\r",
									"if(arrRoles && arrRoles.length > 0){\r",
									"    postman.setNextRequest(\"https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus\");\r",
									"\r",
									"}else{\r",
									"    postman.setNextRequest(null);\r",
									"    pm.environment.unset(\"arrRoles\");\r",
									"}\r",
									"\r",
									"var roleName = pm.environment.get(\"roleName\");\r",
									"\r",
									"if(roleName && roleName.length > 0){\r",
									"    postman.setNextRequest(\"https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus\");\r",
									"\r",
									"}else{\r",
									"    postman.setNextRequest(null);\r",
									"    pm.environment.unset(\"roleName\");\r",
									"}\r",
									"\r",
									"\r",
									"//For chaining\r",
									"\r",
									"// var jsonResponse=pm.response.json();\r",
									"// var newUserId=jsonResponse.userId;\r",
									"\r",
									"// pm.globals.set(\"UId\", newUserId);\r",
									"\r",
									"\r",
									"// console.log(\"The created User Id is \"+ newUserId);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cb9b6f3f-52f6-4d0c-9945-98aa03813d0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n\"userFirstName\":\"{{fName}}\",\r\n\"userLastName\":\"{{LName}}\",\r\n\"userPhoneNumber\":\"{{phnNum}}\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\":\"{{roleid_}}\",\r\n\"userRoleStatus\":\"{{current_roleName}}\"\r\n}\r\n],\r\n\"userTimeZone\":\"{{Tz5}}\",\r\n\"userVisaStatus\":\"H4-EAD\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "MultipleRuns with same set of data Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5bd07c0-0dc6-42ba-bd93-d6af46035539",
								"exec": [
									"\r",
									"//User Role\r",
									"pm.collectionVariables.set(\"ROLE_ID_R01\", \"R01\");\r",
									"\r",
									"//Random Number\r",
									"\r",
									"const phNo = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"phnNum\",phNo);\r",
									"\r",
									"const timeZn_1= \"EST\";\r",
									"pm.environment.set(\"Tz1\",timeZn_1);\r",
									"\r",
									"const timeZn_2= \"CST\";\r",
									"pm.environment.set(\"Tz2\",timeZn_2);\r",
									"\r",
									"const timeZn_3= \"MST\";\r",
									"pm.environment.set(\"Tz3\",timeZn_3);\r",
									"\r",
									"const timeZn_4= \"PST\";\r",
									"pm.environment.set(\"Tz4\",timeZn_4);\r",
									"\r",
									"const timeZn_5= \"IST\";\r",
									"pm.environment.set(\"Tz5\",timeZn_5);\r",
									"\r",
									"//Random First Name\r",
									"var rnFName=pm.variables.replaceIn('{{$randomFirstName}}');\r",
									"pm.environment.set(\"fName\",rnFName);\r",
									"\r",
									"var rnLName=pm.variables.replaceIn('{{$randomLastName}}');\r",
									"pm.environment.set(\"LName\",rnLName);\r",
									"\r",
									"\r",
									"//Role_Id_multipleIteration\r",
									"var arrRoles = pm.environment.get(\"arrRoles\");\r",
									"\r",
									"if(!arrRoles){\r",
									"  arrRoles = [\"R01\",\"R02\",\"R03\"];\r",
									"}\r",
									"\r",
									"var currSelectedRole = arrRoles.shift();\r",
									"console.log(\"array now is \",arrRoles);\r",
									"console.log(\"currSelectedRole now is \",currSelectedRole);\r",
									"pm.environment.set(\"roleid_\",currSelectedRole);\r",
									"pm.environment.set(\"arrRoles\",arrRoles);\r",
									"\r",
									"\r",
									"if(currSelectedRole === 'R01'){\r",
									"    pm.environment.set(\"current_roleName\", \"ROLE_ADMIN\");\r",
									"}\r",
									"else if(currSelectedRole === 'R02'){\r",
									"    pm.environment.set(\"current_roleName\", \"ROLE_STAFF\");\r",
									"}else{\r",
									"    pm.environment.set(\"current_roleName\", \"ROLE_STUDENT\");\r",
									"}\r",
									"\r",
									"//Role_Name \r",
									"\r",
									"// var roleName = pm.environment.get(\"roleName\");\r",
									"// if(!roleName){\r",
									"//     roleName=[\"ROLE_ADMIN\", \"ROLE_STAFF\",\"ROLE_STUDENT\"];\r",
									"// }\r",
									"// var current_roleName= roleName.shift();\r",
									"// console.log(\"array now is\",roleName);\r",
									"// console.log(\"currSelectedRoleName now is \", current_roleName);\r",
									"// pm.environment.set(\"current_roleName\", current_roleName);\r",
									"// pm.environment.set(\"roleName\", roleName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d30530fb-e0b4-4559-b688-1aeaac49fea8",
								"exec": [
									"var arrRoles = pm.environment.get(\"arrRoles\");\r",
									"\r",
									"if(arrRoles && arrRoles.length > 0){\r",
									"    postman.setNextRequest(\"https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus\");\r",
									"\r",
									"}else{\r",
									"    postman.setNextRequest(null);\r",
									"    pm.environment.unset(\"arrRoles\");\r",
									"}\r",
									"\r",
									"var roleName = pm.environment.get(\"roleName\");\r",
									"\r",
									"if(roleName && roleName.length > 0){\r",
									"    postman.setNextRequest(\"https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus\");\r",
									"\r",
									"}else{\r",
									"    postman.setNextRequest(null);\r",
									"    pm.environment.unset(\"roleName\");\r",
									"}\r",
									"\r",
									"\r",
									"//For chaining\r",
									"\r",
									"// var jsonResponse=pm.response.json();\r",
									"// var newUserId=jsonResponse.userId;\r",
									"\r",
									"// pm.globals.set(\"UId\", newUserId);\r",
									"\r",
									"\r",
									"// console.log(\"The created User Id is \"+ newUserId);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d538f9f6-1e46-4ab3-8190-42134821f835",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n\"userFirstName\":\"{{fName}}\",\r\n\"userLastName\":\"{{LName}}\",\r\n\"userPhoneNumber\":\"{{phnNum}}\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\":\"{{roleid_}}\",\r\n\"userRoleStatus\":\"{{current_roleName}}\"\r\n}\r\n],\r\n\"userTimeZone\":\"{{Tz5}}\",\r\n\"userVisaStatus\":\"H4-EAD\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus"
					},
					"response": []
				}
			],
			"id": "c340a966-1be6-4d7a-984f-d11f8b69b7bf"
		},
		{
			"name": "Put",
			"item": [
				{
					"name": "Update User_ById_TZ update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cec261b6-588e-4c9a-bb6d-e0ea56662324",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f2c3bd87-4575-41f4-bd7d-24f8857bbbde",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3fcb1932-a1eb-42e8-9b77-b976cfd6d9de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userId\": \"U756\",\r\n\"userFirstName\": \"Jasmin\",\r\n\"userLastName\": \"Mosciski\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 6100231896,\r\n\"userLocation\": \"string\",\r\n\"userTimeZone\": \"{{Tz2}}\",\r\n\"userLinkedinUrl\": \"string\",\r\n\"userEduUg\": \"string\",\r\n\"userEduPg\": \"string\",\r\n\"userComments\": \"string\",\r\n\"userVisaStatus\": \"GC-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/{{UserId}}"
					},
					"response": []
				},
				{
					"name": "Negative_Update User_ByRoleStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cec261b6-588e-4c9a-bb6d-e0ea56662324",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f2c3bd87-4575-41f4-bd7d-24f8857bbbde",
								"exec": [
									"const jsondata = pm.response.json();\r",
									"\r",
									"pm.test(\"404: Error  with message and Boolean Success detail  – For Invalid UserId\", () =>{\r",
									"    pm.response.to.have.status(404);;\r",
									"    pm.expect(jsondata).to.have.property('success');\r",
									"    pm.expect(jsondata).to.have.property('message');\r",
									"    pm.expect(jsondata.message).to.include('not found');\r",
									"});\r",
									"\r",
									"pm.test(\"failing test\", () => {\r",
									"\r",
									"    try {\r",
									"\r",
									"        pm.expect(200).to.eq(404)\r",
									"\r",
									"    } catch (a) {\r",
									"\r",
									"        console.log(\"RoleID: R02 not found for the UserID: U4525\"+ a)\r",
									"\r",
									"    }\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8b8eb85-cadc-43a1-bcae-04e4fcea8f1c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R02\",\r\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus/{{UserId}}"
					},
					"response": []
				},
				{
					"name": "Update User_ByRoleStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cec261b6-588e-4c9a-bb6d-e0ea56662324",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f2c3bd87-4575-41f4-bd7d-24f8857bbbde",
								"exec": [
									"pm.variables.set(\"userRoleStatus\", \"Partially Active\")\r",
									"console.log(pm.variables.get('userRoleStatus'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "14fd3530-c855-4e8c-b0dd-d6681ac3987e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R01\",\r\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus/{{UserId}}"
					},
					"response": []
				},
				{
					"name": "Update User_ByRoleStatus_InvalidUserId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cec261b6-588e-4c9a-bb6d-e0ea56662324",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f2c3bd87-4575-41f4-bd7d-24f8857bbbde",
								"exec": [
									"pm.test(\"failing test\", () => {\r",
									"\r",
									"    try {\r",
									"\r",
									"        pm.expect(200).to.eq(404)\r",
									"\r",
									"    } catch (a) {\r",
									"\r",
									"        console.log(\"UserID: U12 Not Found\"+ a)\r",
									"\r",
									"    }\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3e6db994-61cf-4dd4-bae7-ff21cf9c90de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R02\",\r\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleStatus/U12"
					},
					"response": []
				},
				{
					"name": "Assign Update User Role Program Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58778d11-4240-47de-8341-612eed327638",
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check Response Time\r",
									"pm.test(\"Response Time is less than 500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Header validation\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d84b550b-882c-49a1-bce4-553954ddc677",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"programId\": 1362,\r\n  \"roleId\": \"{{roleid_UserBatchProgStatus}}\",\r\n  \"userId\": \"{{UR_P_B}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": 2490,\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleProgramBatchStatus/{{UR_P_B}}"
					},
					"response": []
				},
				{
					"name": "Negative_Assign Update User Role Program Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3149699a-f73d-4e99-bdfe-e7e3e077cc5d",
								"exec": [
									"const jsondata = pm.response.json();\r",
									"\r",
									"pm.test(\"404: Error  with message and Boolean Success detail  – For Invalid UserId\", () =>{\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsondata).to.have.property('success');\r",
									"    pm.expect(jsondata).to.have.property('message');\r",
									"    pm.expect(jsondata.message).to.include('not found');\r",
									"});\r",
									"\r",
									"pm.test(\"failing test\", () => {\r",
									"\r",
									"    try {\r",
									"\r",
									"        pm.expect(200).to.eq(404)\r",
									"\r",
									"    } catch (a) {\r",
									"\r",
									"        console.log( \"User not found with Id : U214 \"+ a)\r",
									"\r",
									"    }\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a93352b5-cdc0-4454-aae6-57f2365849f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"programId\": 1362,\r\n  \"roleId\": \"{{roleid_UserBatchProgStatus}}\",\r\n  \"userId\": \"U2141\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": 2490,\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/roleProgramBatchStatus/U214"
					},
					"response": []
				}
			],
			"id": "30b1db6d-d0d3-4527-88a0-90e875cf8fbb"
		},
		{
			"name": "Get",
			"item": [
				{
					"name": "Get_AllStaff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29c126f8-9332-47fd-aa31-34817b2005d2",
								"exec": [
									"//Status Code Validation",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"//var jsonResponse=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"    pm.expect(jsonData[1].userComments).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userEduPg).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userFirstName).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userId).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userLastName).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userLinkedinUrl).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userLocation).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userMiddleName).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userPhoneNumber).to.be.a(\"number\");",
									"    pm.expect(jsonData[1].userTimeZone).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userVisaStatus).to.be.a(\"string\");      ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "224ff3dd-ec7e-46cd-a6fa-e360efd490f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/users/users/getAllStaff"
					},
					"response": []
				},
				{
					"name": "Get_User_ById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "353bed02-34ed-4313-9520-1f12c44dcfce",
								"exec": [
									"//Status Code Validation\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Check Header is present or not\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check Header Value\r",
									"pm.test(\"Content-Type header has expected value\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"//Check Response Time\r",
									"pm.test(\"Response Time is less than 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test Data Type for response\",() => {\r",
									"    pm.expect(jsonData[0].userRoleId).to.be.a(\"number\");\r",
									"    pm.expect(jsonData[0].user.userId).to.be.a(\"string\");\r",
									"    //pm.expect(jsonData[1].userId).to.be.a(\"string\");\r",
									"    pm.expect(jsonData[0].user.userLastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData[0].user.userPhoneNumber).to.be.a(\"number\");\r",
									"   pm.expect(jsonData[0].user.userTimeZone).to.be.a(\"string\");\r",
									"     pm.expect(jsonData[0].user.userVisaStatus).to.be.a(\"string\");  \r",
									"     pm.expect(jsonData[0].user.userComments).to.be.a(\"string\");\r",
									"\r",
									"});\r",
									"\r",
									" pm.test(\"Newly created User matches request attributes\",() => {\r",
									"     var jsonData = pm.response.json(); \r",
									"     pm.expect(jsonData[0].user).to.haveOwnProperty(\"userId\");\r",
									"     pm.expect(jsonData[0].user.userComments).to.include(\"Team APIcScripters_R01\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"roleId is R01\", () => {\r",
									"   var jsonData = pm.response.json(); \r",
									"  pm.expect(jsonData[0].role.roleId).to.eql(\"R01\");\r",
									"  //pm.expect(responseJson.age).to.eql(23);\r",
									"});\r",
									"\r",
									"var schema=\r",
									"{\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userRoleId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"user\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"userId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userFirstName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLastName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userMiddleName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userPhoneNumber\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"userLocation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userTimeZone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLinkedinUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduUg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduPg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userComments\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userVisaStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"userId\",\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",\r",
									"            \"userMiddleName\",\r",
									"            \"userPhoneNumber\",\r",
									"            \"userLocation\",\r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",\r",
									"            \"userEduUg\",\r",
									"            \"userEduPg\",\r",
									"            \"userComments\",\r",
									"            \"userVisaStatus\"\r",
									"          ]\r",
									"        },\r",
									"        \"role\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"roleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"roleName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"roleDesc\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"creationTime\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"lastModTime\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"hibernateLazyInitializer\": {\r",
									"              \"type\": \"object\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"roleId\",\r",
									"            \"roleName\",\r",
									"            \"roleDesc\",\r",
									"            \"creationTime\",\r",
									"            \"lastModTime\",\r",
									"            \"hibernateLazyInitializer\"\r",
									"          ]\r",
									"        },\r",
									"        \"batches\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"userRoleStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userRoleId\",\r",
									"        \"user\",\r",
									"        \"role\",\r",
									"        \"batches\",\r",
									"        \"userRoleStatus\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7921ffe8-03d1-4192-a54b-2883d76e905d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/users/users/{{UserId}}"
					},
					"response": []
				},
				{
					"name": "Negative_Get_User_ById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "353bed02-34ed-4313-9520-1f12c44dcfce",
								"exec": [
									"//status code validation & Message & Boolean success validation\r",
									"\r",
									"const jsondata = pm.response.json();\r",
									"\r",
									"pm.test(\"404: Error  with message and Boolean Success detail  – For Invalid UserId\", () =>{\r",
									"    pm.response.to.have.status(404);;\r",
									"    pm.expect(jsondata).to.have.property('success');\r",
									"    pm.expect(jsondata).to.have.property('message');\r",
									"    pm.expect(jsondata.message).to.include('not found');\r",
									"});\r",
									"\r",
									"\r",
									"//Check Response Time\r",
									"pm.test(\"Response Time is less than 500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"failing test\", () => {\r",
									"\r",
									"    try {\r",
									"\r",
									"        pm.expect(200).to.eq(404)\r",
									"\r",
									"    } catch (a) {\r",
									"\r",
									"        console.log(\"User Id U12 not found\"+ a)\r",
									"\r",
									"    }\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "27afb5da-355f-4af8-9177-37152fcb1aae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/users/{{NegUserId}}"
					},
					"response": []
				},
				{
					"name": "Get_All_Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65474242-fc75-4670-bcf0-587851f1f032",
								"exec": [
									"//Status Code Validation",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"//var jsonResponse=pm.response.json();",
									"pm.test(\"Test Data Type for response\",() => {",
									"   ",
									"    pm.expect(jsonData[1].userFirstName).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userId).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userLastName).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userPhoneNumber).to.be.a(\"number\");",
									"    pm.expect(jsonData[1].userTimeZone).to.be.a(\"string\");",
									"    pm.expect(jsonData[1].userVisaStatus).to.be.a(\"string\"); ",
									"    // pm.expect(jsonData[1].userLocation).to.be.a(\"string\");       ",
									"});",
									"",
									"var schema = {",
									"    \"properties\": {",
									"    \"userId\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userFirstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userLastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userPhoneNumber\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"userLocation\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"userTimeZone\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userLinkedinUrl\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"userEduUg\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"userEduPg\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"userVisaStatus\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"userId\",",
									"    \"userFirstName\",",
									"    \"userLastName\",",
									"    \"userPhoneNumber\",",
									"    \"userLocation\",",
									"    \"userTimeZone\",",
									"    \"userLinkedinUrl\",",
									"    \"userEduUg\",",
									"    \"userEduPg\",",
									"    \"userVisaStatus\"",
									"  ],",
									"};",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8ef1c77f-b04b-46b0-abc7-19f258f58aae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/users/users"
					},
					"response": []
				},
				{
					"name": "Get_User_Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad3daf2b-29e6-49c0-bf59-b7b47493b150",
								"exec": [
									"//Status Code Validation\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Check Header is present or not\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check Header Value\r",
									"pm.test(\"Content-Type header has expected value\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response Body\r",
									"var jsonData=pm.response.json();\r",
									"//var jsonResponse=pm.response.json();\r",
									"pm.test(\"Test Data Type for response\", () => {\r",
									"  pm.expect(jsonData[1].user.userComments).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userEduPg).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userFirstName).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userId).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userLastName).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userLinkedinUrl).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userLocation).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userMiddleName).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userPhoneNumber).to.be.a(\"number\");\r",
									"  pm.expect(jsonData[1].user.userTimeZone).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[1].user.userVisaStatus).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"properties\": {\r",
									"    \"userRoleId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"hibernateLazyInitializer\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"hibernateLazyInitializer\"\r",
									"      ]\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"roleId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creationTime\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"hibernateLazyInitializer\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"roleId\",\r",
									"        \"roleName\",\r",
									"        \"roleDesc\",\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\",\r",
									"        \"hibernateLazyInitializer\"\r",
									"      ]\r",
									"    },\r",
									"    \"batches\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"userRoleStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userRoleId\",\r",
									"    \"user\",\r",
									"    \"role\",\r",
									"    \"batches\",\r",
									"    \"userRoleStatus\"\r",
									"  ],\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"    \r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var filteredData = jsonData.filter(function(item) {\r",
									"  if (!item.user.userComments) {\r",
									"    return\r",
									"  }\r",
									"  return item.user.userComments.includes(\"APIcScripters\");\r",
									"});\r",
									"console.log(\"filteredData\", filteredData);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e499cebb-bca9-490d-a6d8-dc5305c8d61a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/users/users/roles"
					},
					"response": []
				},
				{
					"name": "Get_AllStaff_Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f45e1a6-d5ec-47a4-a355-3996caec2474",
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var allStaff = jsonData.filter(function(item) {\r",
									"  if (!item.role.roleId) {\r",
									"    return\r",
									"  }\r",
									"  return item.role.roleId.includes(\"R02\");\r",
									"});\r",
									"console.log(\"role_allStaff\", allStaff);\r",
									"\r",
									"//Status Code Validation\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Check Header is present or not\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check Header Value\r",
									"pm.test(\"Content-Type header has expected value\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"//Check Response Time\r",
									"pm.test(\"Response Time is less than 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Validate Response Body\r",
									"var jsonData=pm.response.json();\r",
									"//var jsonResponse=pm.response.json();\r",
									"pm.test(\"Test Data Type for response\",() => {\r",
									"   \r",
									"    pm.expect(jsonData[1].userFirstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData[1].userId).to.be.a(\"string\");\r",
									"    pm.expect(jsonData[1].userLastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData[1].userPhoneNumber).to.be.a(\"number\");\r",
									"    pm.expect(jsonData[1].userTimeZone).to.be.a(\"string\");\r",
									"    pm.expect(jsonData[1].userVisaStatus).to.be.a(\"string\"); \r",
									"    // pm.expect(jsonData[1].userLocation).to.be.a(\"string\");       \r",
									"});\r",
									"//Schema Validation\r",
									"var schema = {\r",
									"\r",
									"    \"properties\": {\r",
									"    \"userRoleId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"hibernateLazyInitializer\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"hibernateLazyInitializer\"\r",
									"      ]\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"roleId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creationTime\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"hibernateLazyInitializer\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"roleId\",\r",
									"        \"roleName\",\r",
									"        \"roleDesc\",\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\",\r",
									"        \"hibernateLazyInitializer\"\r",
									"      ]\r",
									"    },\r",
									"    \"batches\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"userRoleStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userRoleId\",\r",
									"    \"user\",\r",
									"    \"role\",\r",
									"    \"batches\",\r",
									"    \"userRoleStatus\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d45d4d20-4e56-4907-85d3-1caae730f122",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8ff98ef4-69e9-4d50-a46d-2d8451fe4437",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/users/users/roles"
					},
					"response": []
				},
				{
					"name": "Get_ById_RandomInt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d716ccb7-3909-4572-a24b-ae2ac58a5e60",
								"exec": [
									"//Status Code Validation",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Check Header is present or not",
									"pm.test(\"Content-Type Header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Check Header Value",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"//Check Response Time",
									"pm.test(\"Response Time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//Validate Response Body",
									"var jsonData=pm.response.json();",
									"//var jsonResponse=pm.response.json();",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b42f7f12-f70e-481f-91f3-f3bf0ed17d1c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "U324",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseurl}}/users/users/U{{$randomInt}}"
					},
					"response": []
				}
			],
			"id": "de3af780-7c5e-4ce3-ba4c-f850ed544d25"
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "DeleteRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9453284-9370-461d-8763-cbc3ce0022f9",
								"exec": [
									"//Status Code Validation\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Check Header is present or not\r",
									"pm.test(\"Content-Type Header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check Header Value\r",
									"pm.test(\"Content-Type header has expected value\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain;charset=UTF-8\");\r",
									"});\r",
									"//Check Response Time\r",
									"pm.test(\"Response Time is less than 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5f83fa23-9272-4f9e-b9bb-e04126984cd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseurl}}/users/users/U5479"
					},
					"response": []
				},
				{
					"name": "Negative_DeleteRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9453284-9370-461d-8763-cbc3ce0022f9",
								"exec": [
									"\r",
									"pm.test(\"failing test\", () => {\r",
									"\r",
									"    try {\r",
									"\r",
									"        pm.expect(200).to.eq(404)\r",
									"\r",
									"    } catch (a) {\r",
									"\r",
									"        console.log( \"UserID: U5439 doesnot exist\"+ a)\r",
									"\r",
									"    }\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dfa22116-0c00-4da1-8b92-5dd6c84f0754",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseurl}}/users/users/U5439"
					},
					"response": []
				}
			],
			"id": "89856588-a077-49c0-9b72-bedf2245cd51"
		},
		{
			"name": "Create_User_Datadriven",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c05d06bb-07d1-48f7-90e8-cf19c28ddcbd",
						"exec": [
							"",
							"  ",
							"  ",
							"  // Validate the status code",
							"  console.log(response);",
							"  pm.test(\"Status code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							" /* // Validate response body is not empty",
							"  pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(response.text()).to.not.be.empty;",
							"  });*/",
							"//Check Header is present or not",
							"pm.test(\"Content-Type Header is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//Check Header Value",
							"pm.test(\"Content-Type Header is application-json\", () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"//Check Response Time",
							"pm.test(\"Response Time is less than 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"//userId generation",
							"var jsonResponse=pm.response.json();",
							"var newUserId2=jsonResponse.userId;",
							"",
							"//Validate Response Body",
							"var jsonData=pm.response.json();",
							"JSON.parse(response.body)",
							"pm.test(\"Test Data Type for response\", () => {",
							"  if (jsonData.hasOwnProperty('NFirstName')) {",
							"    pm.expect(typeof jsonData.NFirstName).to.equal(\"string\");",
							"  }",
							"  else {",
							"    pm.expect.fail(\"NFirstName property not found in the response\");",
							"  }",
							"  if (jsonData.hasOwnProperty('NLastName')) {",
							"    pm.expect(typeof jsonData.NLastName).to.equal(\"string\");",
							"  }",
							"  else {",
							"    pm.expect.fail(\"NLastName property not found in the response\");",
							"  }",
							"  if (jsonData.hasOwnProperty('NRoleStatus')) {",
							"    pm.expect(typeof jsonData.NRoleStatus).to.equal(\"string\");",
							"  }",
							"  else {",
							"    pm.expect.fail(\"NRoleStatus property not found in the response\");",
							"  }",
							"  if (jsonData.hasOwnProperty('NRoleId')) {",
							"    pm.expect(typeof jsonData.NRoleId).to.equal(\"string\");",
							"  }",
							"  else {",
							"    pm.expect.fail(\"NRoleId property not found in the response\");",
							"  }",
							"  if (jsonData.hasOwnProperty('NVisaStatus')) {",
							"    pm.expect(typeof jsonData.NVisaStatus).to.equal(\"string\");",
							"  }",
							"  else {",
							"    pm.expect.fail(\"NVisaStatus property not found in the response\");",
							"  }",
							"  ",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d44e7f31-642f-471a-a829-3fdd28776792",
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "774c18bf-f274-46f6-b9eb-e775b6adf2d7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"userComments\": \"string\",\n\"userEduPg\": \"string\",\n\"userEduUg\": \"string\",\n\"userFirstName\": \"{{userFirstName}}\",\n\"userLastName\": \"{{userLastName}}\",\n\"userLinkedinUrl\": \"string\",\n\"userLocation\": \"string\",\n\"userMiddleName\": \"string\",\n\"userPhoneNumber\": {{userPhoneNumber}},\n\"userRoleMaps\": [\n{\n\"roleId\": \"{{roleId}}\",\n\"userRoleStatus\": \"{{userRoleStatus}}\"\n}\n],\n\"userTimeZone\": \"{{userTimeZone}}\",\n\"userVisaStatus\":\"{{userVisaStatus}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}/users/users/roleStatus"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "55ca885b-3881-4a9f-a8f2-e6ad5852dee2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "79955a86-970b-4e70-8508-bd46b4015729",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "1d0556af-2fd2-4546-a495-8329208c2e80",
			"key": "BaseURL",
			"value": "lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com",
			"type": "string",
			"disabled": true
		},
		{
			"id": "dfd3835e-21c7-4651-9fe4-d11de56775d4",
			"key": "ROLE_ID_R01",
			"value": "",
			"disabled": true
		},
		{
			"id": "80972180-1d33-4619-9146-27e7e7f19d89",
			"key": "ROLE_ID_R01",
			"value": ""
		},
		{
			"id": "47397c68-d286-4717-a12c-c24ac79892b1",
			"key": "UserId",
			"value": "U4525"
		},
		{
			"id": "5371c16e-b781-439c-84e4-e6c77c8ede88",
			"key": "newTZ",
			"value": "MST",
			"type": "string"
		},
		{
			"id": "0c3650c0-680b-4dc1-b036-2cb64845e860",
			"key": "UserId1",
			"value": "Sid"
		},
		{
			"id": "5cedd141-d8a9-4ea1-8eea-58ee7dd2bfd7",
			"key": "userId1",
			"value": ""
		},
		{
			"id": "7f275e86-55c8-46dd-a035-c2cd9c789a65",
			"key": "euid",
			"value": "Sid"
		}
	]
}